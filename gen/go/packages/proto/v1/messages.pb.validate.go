// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: messages.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContentMultiError, or nil if none found.
func (m *Content) ValidateAll() error {
	return m.validate(true)
}

func (m *Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ContentValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 255 {
		err := ContentValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 5000 {
		err := ContentValidationError{
			field:  "Description",
			reason: "value length must be at most 5000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 50 {
		err := ContentValidationError{
			field:  "Tags",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 100 {
			err := ContentValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 2 || l > 10 {
		err := ContentValidationError{
			field:  "Language",
			reason: "value length must be between 2 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Content_Language_Pattern.MatchString(m.GetLanguage()) {
		err := ContentValidationError{
			field:  "Language",
			reason: "value does not match regex pattern \"^[a-z]{2,3}(-[A-Z]{2})?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDurationSeconds(); val < 0 || val > 86400 {
		err := ContentValidationError{
			field:  "DurationSeconds",
			reason: "value must be inside range [0, 86400]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Content_PublishedAt_Pattern.MatchString(m.GetPublishedAt()) {
		err := ContentValidationError{
			field:  "PublishedAt",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(Z|[+-]\\\\d{2}:\\\\d{2})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Content_ContentType_NotInLookup[m.GetContentType()]; ok {
		err := ContentValidationError{
			field:  "ContentType",
			reason: "value must not be in list [CONTENT_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ContentType_name[int32(m.GetContentType())]; !ok {
		err := ContentValidationError{
			field:  "ContentType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Content_CreatedAt_Pattern.MatchString(m.GetCreatedAt()) {
		err := ContentValidationError{
			field:  "CreatedAt",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(Z|[+-]\\\\d{2}:\\\\d{2})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Content_UpdatedAt_Pattern.MatchString(m.GetUpdatedAt()) {
		err := ContentValidationError{
			field:  "UpdatedAt",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(Z|[+-]\\\\d{2}:\\\\d{2})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUrl()); l < 1 || l > 2048 {
		err := ContentValidationError{
			field:  "Url",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = ContentValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ContentValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPlatformName()); l < 1 || l > 100 {
		err := ContentValidationError{
			field:  "PlatformName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContentMultiError(errors)
	}

	return nil
}

func (m *Content) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ContentMultiError is an error wrapping multiple validation errors returned
// by Content.ValidateAll() if the designated constraints aren't met.
type ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentMultiError) AllErrors() []error { return m }

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

var _Content_Language_Pattern = regexp.MustCompile("^[a-z]{2,3}(-[A-Z]{2})?$")

var _Content_PublishedAt_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:\\d{2})$")

var _Content_ContentType_NotInLookup = map[ContentType]struct{}{
	0: {},
}

var _Content_CreatedAt_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:\\d{2})$")

var _Content_UpdatedAt_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:\\d{2})$")

// Validate checks the field values on CreateContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContentRequestMultiError, or nil if none found.
func (m *CreateContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 255 {
		err := CreateContentRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 5000 {
		err := CreateContentRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 5000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 50 {
		err := CreateContentRequestValidationError{
			field:  "Tags",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 100 {
			err := CreateContentRequestValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 2 || l > 10 {
		err := CreateContentRequestValidationError{
			field:  "Language",
			reason: "value length must be between 2 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateContentRequest_Language_Pattern.MatchString(m.GetLanguage()) {
		err := CreateContentRequestValidationError{
			field:  "Language",
			reason: "value does not match regex pattern \"^[a-z]{2,3}(-[A-Z]{2})?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDurationSeconds(); val < 0 || val > 86400 {
		err := CreateContentRequestValidationError{
			field:  "DurationSeconds",
			reason: "value must be inside range [0, 86400]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateContentRequest_PublishedAt_Pattern.MatchString(m.GetPublishedAt()) {
		err := CreateContentRequestValidationError{
			field:  "PublishedAt",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(Z|[+-]\\\\d{2}:\\\\d{2})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateContentRequest_ContentType_NotInLookup[m.GetContentType()]; ok {
		err := CreateContentRequestValidationError{
			field:  "ContentType",
			reason: "value must not be in list [CONTENT_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ContentType_name[int32(m.GetContentType())]; !ok {
		err := CreateContentRequestValidationError{
			field:  "ContentType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUrl()); l < 1 || l > 2048 {
		err := CreateContentRequestValidationError{
			field:  "Url",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = CreateContentRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateContentRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPlatformName()); l < 1 || l > 100 {
		err := CreateContentRequestValidationError{
			field:  "PlatformName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateContentRequestMultiError(errors)
	}

	return nil
}

// CreateContentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateContentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContentRequestMultiError) AllErrors() []error { return m }

// CreateContentRequestValidationError is the validation error returned by
// CreateContentRequest.Validate if the designated constraints aren't met.
type CreateContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContentRequestValidationError) ErrorName() string {
	return "CreateContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContentRequestValidationError{}

var _CreateContentRequest_Language_Pattern = regexp.MustCompile("^[a-z]{2,3}(-[A-Z]{2})?$")

var _CreateContentRequest_PublishedAt_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:\\d{2})$")

var _CreateContentRequest_ContentType_NotInLookup = map[ContentType]struct{}{
	0: {},
}

// Validate checks the field values on GetContentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContentRequestMultiError, or nil if none found.
func (m *GetContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetContentRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetContentRequestMultiError(errors)
	}

	return nil
}

func (m *GetContentRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetContentRequestMultiError is an error wrapping multiple validation errors
// returned by GetContentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContentRequestMultiError) AllErrors() []error { return m }

// GetContentRequestValidationError is the validation error returned by
// GetContentRequest.Validate if the designated constraints aren't met.
type GetContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContentRequestValidationError) ErrorName() string {
	return "GetContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContentRequestValidationError{}

// Validate checks the field values on UpdateContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContentRequestMultiError, or nil if none found.
func (m *UpdateContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateContentRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 255 {
		err := UpdateContentRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 5000 {
		err := UpdateContentRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 5000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 50 {
		err := UpdateContentRequestValidationError{
			field:  "Tags",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 100 {
			err := UpdateContentRequestValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 2 || l > 10 {
		err := UpdateContentRequestValidationError{
			field:  "Language",
			reason: "value length must be between 2 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateContentRequest_Language_Pattern.MatchString(m.GetLanguage()) {
		err := UpdateContentRequestValidationError{
			field:  "Language",
			reason: "value does not match regex pattern \"^[a-z]{2,3}(-[A-Z]{2})?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDurationSeconds(); val < 0 || val > 86400 {
		err := UpdateContentRequestValidationError{
			field:  "DurationSeconds",
			reason: "value must be inside range [0, 86400]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateContentRequest_PublishedAt_Pattern.MatchString(m.GetPublishedAt()) {
		err := UpdateContentRequestValidationError{
			field:  "PublishedAt",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(Z|[+-]\\\\d{2}:\\\\d{2})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateContentRequest_ContentType_NotInLookup[m.GetContentType()]; ok {
		err := UpdateContentRequestValidationError{
			field:  "ContentType",
			reason: "value must not be in list [CONTENT_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ContentType_name[int32(m.GetContentType())]; !ok {
		err := UpdateContentRequestValidationError{
			field:  "ContentType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUrl()); l < 1 || l > 2048 {
		err := UpdateContentRequestValidationError{
			field:  "Url",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = UpdateContentRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := UpdateContentRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPlatformName()); l < 1 || l > 100 {
		err := UpdateContentRequestValidationError{
			field:  "PlatformName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateContentRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateContentRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateContentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateContentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContentRequestMultiError) AllErrors() []error { return m }

// UpdateContentRequestValidationError is the validation error returned by
// UpdateContentRequest.Validate if the designated constraints aren't met.
type UpdateContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContentRequestValidationError) ErrorName() string {
	return "UpdateContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContentRequestValidationError{}

var _UpdateContentRequest_Language_Pattern = regexp.MustCompile("^[a-z]{2,3}(-[A-Z]{2})?$")

var _UpdateContentRequest_PublishedAt_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:\\d{2})$")

var _UpdateContentRequest_ContentType_NotInLookup = map[ContentType]struct{}{
	0: {},
}

// Validate checks the field values on DeleteContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteContentRequestMultiError, or nil if none found.
func (m *DeleteContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteContentRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteContentRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteContentRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteContentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteContentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContentRequestMultiError) AllErrors() []error { return m }

// DeleteContentRequestValidationError is the validation error returned by
// DeleteContentRequest.Validate if the designated constraints aren't met.
type DeleteContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContentRequestValidationError) ErrorName() string {
	return "DeleteContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContentRequestValidationError{}

// Validate checks the field values on ListContentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContentsRequestMultiError, or nil if none found.
func (m *ListContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListContentsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPageToken()) > 1024 {
		err := ListContentsRequestValidationError{
			field:  "PageToken",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListContentsRequestMultiError(errors)
	}

	return nil
}

// ListContentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContentsRequestMultiError) AllErrors() []error { return m }

// ListContentsRequestValidationError is the validation error returned by
// ListContentsRequest.Validate if the designated constraints aren't met.
type ListContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContentsRequestValidationError) ErrorName() string {
	return "ListContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContentsRequestValidationError{}

// Validate checks the field values on ListContentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContentsResponseMultiError, or nil if none found.
func (m *ListContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetContents()) > 100 {
		err := ListContentsResponseValidationError{
			field:  "Contents",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetContents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContentsResponseValidationError{
						field:  fmt.Sprintf("Contents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContentsResponseValidationError{
						field:  fmt.Sprintf("Contents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContentsResponseValidationError{
					field:  fmt.Sprintf("Contents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetNextPageToken()) > 1024 {
		err := ListContentsResponseValidationError{
			field:  "NextPageToken",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListContentsResponseMultiError(errors)
	}

	return nil
}

// ListContentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContentsResponseMultiError) AllErrors() []error { return m }

// ListContentsResponseValidationError is the validation error returned by
// ListContentsResponse.Validate if the designated constraints aren't met.
type ListContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContentsResponseValidationError) ErrorName() string {
	return "ListContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContentsResponseValidationError{}

// Validate checks the field values on SearchContentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchContentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchContentsRequestMultiError, or nil if none found.
func (m *SearchContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetQuery()); l < 1 || l > 500 {
		err := SearchContentsRequestValidationError{
			field:  "Query",
			reason: "value length must be between 1 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := SearchContentsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPageToken()) > 1024 {
		err := SearchContentsRequestValidationError{
			field:  "PageToken",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchContentsRequestMultiError(errors)
	}

	return nil
}

// SearchContentsRequestMultiError is an error wrapping multiple validation
// errors returned by SearchContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchContentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchContentsRequestMultiError) AllErrors() []error { return m }

// SearchContentsRequestValidationError is the validation error returned by
// SearchContentsRequest.Validate if the designated constraints aren't met.
type SearchContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchContentsRequestValidationError) ErrorName() string {
	return "SearchContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchContentsRequestValidationError{}

// Validate checks the field values on SearchContentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchContentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchContentsResponseMultiError, or nil if none found.
func (m *SearchContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetContents()) > 100 {
		err := SearchContentsResponseValidationError{
			field:  "Contents",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetContents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchContentsResponseValidationError{
						field:  fmt.Sprintf("Contents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchContentsResponseValidationError{
						field:  fmt.Sprintf("Contents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchContentsResponseValidationError{
					field:  fmt.Sprintf("Contents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetNextPageToken()) > 1024 {
		err := SearchContentsResponseValidationError{
			field:  "NextPageToken",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchContentsResponseMultiError(errors)
	}

	return nil
}

// SearchContentsResponseMultiError is an error wrapping multiple validation
// errors returned by SearchContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchContentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchContentsResponseMultiError) AllErrors() []error { return m }

// SearchContentsResponseValidationError is the validation error returned by
// SearchContentsResponse.Validate if the designated constraints aren't met.
type SearchContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchContentsResponseValidationError) ErrorName() string {
	return "SearchContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchContentsResponseValidationError{}

// Validate checks the field values on ImportRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImportRequestMultiError, or
// nil if none found.
func (m *ImportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUrl()); l < 1 || l > 2048 {
		err := ImportRequestValidationError{
			field:  "Url",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = ImportRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ImportRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImportRequestMultiError(errors)
	}

	return nil
}

// ImportRequestMultiError is an error wrapping multiple validation errors
// returned by ImportRequest.ValidateAll() if the designated constraints
// aren't met.
type ImportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportRequestMultiError) AllErrors() []error { return m }

// ImportRequestValidationError is the validation error returned by
// ImportRequest.Validate if the designated constraints aren't met.
type ImportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportRequestValidationError) ErrorName() string { return "ImportRequestValidationError" }

// Error satisfies the builtin error interface
func (e ImportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportRequestValidationError{}

// Validate checks the field values on ImportResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImportResponseMultiError,
// or nil if none found.
func (m *ImportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetContent() == nil {
		err := ImportResponseValidationError{
			field:  "Content",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportResponseValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportResponseValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportResponseValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ImportResponseMultiError(errors)
	}

	return nil
}

// ImportResponseMultiError is an error wrapping multiple validation errors
// returned by ImportResponse.ValidateAll() if the designated constraints
// aren't met.
type ImportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportResponseMultiError) AllErrors() []error { return m }

// ImportResponseValidationError is the validation error returned by
// ImportResponse.Validate if the designated constraints aren't met.
type ImportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportResponseValidationError) ErrorName() string { return "ImportResponseValidationError" }

// Error satisfies the builtin error interface
func (e ImportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportResponseValidationError{}
