// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: packages/proto/v1/cms.proto

package mawjoodv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CMSService_CreateContent_FullMethodName      = "/mawjood.v1.CMSService/CreateContent"
	CMSService_UpdateContent_FullMethodName      = "/mawjood.v1.CMSService/UpdateContent"
	CMSService_DeleteContent_FullMethodName      = "/mawjood.v1.CMSService/DeleteContent"
	CMSService_ListContents_FullMethodName       = "/mawjood.v1.CMSService/ListContents"
	CMSService_ImportFromExternal_FullMethodName = "/mawjood.v1.CMSService/ImportFromExternal"
)

// CMSServiceClient is the client API for CMSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for content management (admin operations)
type CMSServiceClient interface {
	// Creates a new piece of content
	CreateContent(ctx context.Context, in *CreateContentRequest, opts ...grpc.CallOption) (*Content, error)
	// Updates an existing piece of content
	UpdateContent(ctx context.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (*Content, error)
	// Deletes a piece of content
	DeleteContent(ctx context.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*Empty, error)
	// Lists all content for admin management
	ListContents(ctx context.Context, in *ListContentsRequest, opts ...grpc.CallOption) (*ListContentsResponse, error)
	// Imports content from external sources
	ImportFromExternal(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
}

type cMSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCMSServiceClient(cc grpc.ClientConnInterface) CMSServiceClient {
	return &cMSServiceClient{cc}
}

func (c *cMSServiceClient) CreateContent(ctx context.Context, in *CreateContentRequest, opts ...grpc.CallOption) (*Content, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Content)
	err := c.cc.Invoke(ctx, CMSService_CreateContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) UpdateContent(ctx context.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (*Content, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Content)
	err := c.cc.Invoke(ctx, CMSService_UpdateContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) DeleteContent(ctx context.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CMSService_DeleteContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) ListContents(ctx context.Context, in *ListContentsRequest, opts ...grpc.CallOption) (*ListContentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContentsResponse)
	err := c.cc.Invoke(ctx, CMSService_ListContents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) ImportFromExternal(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, CMSService_ImportFromExternal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CMSServiceServer is the server API for CMSService service.
// All implementations must embed UnimplementedCMSServiceServer
// for forward compatibility.
//
// Service for content management (admin operations)
type CMSServiceServer interface {
	// Creates a new piece of content
	CreateContent(context.Context, *CreateContentRequest) (*Content, error)
	// Updates an existing piece of content
	UpdateContent(context.Context, *UpdateContentRequest) (*Content, error)
	// Deletes a piece of content
	DeleteContent(context.Context, *DeleteContentRequest) (*Empty, error)
	// Lists all content for admin management
	ListContents(context.Context, *ListContentsRequest) (*ListContentsResponse, error)
	// Imports content from external sources
	ImportFromExternal(context.Context, *ImportRequest) (*ImportResponse, error)
	mustEmbedUnimplementedCMSServiceServer()
}

// UnimplementedCMSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCMSServiceServer struct{}

func (UnimplementedCMSServiceServer) CreateContent(context.Context, *CreateContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContent not implemented")
}
func (UnimplementedCMSServiceServer) UpdateContent(context.Context, *UpdateContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContent not implemented")
}
func (UnimplementedCMSServiceServer) DeleteContent(context.Context, *DeleteContentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContent not implemented")
}
func (UnimplementedCMSServiceServer) ListContents(context.Context, *ListContentsRequest) (*ListContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContents not implemented")
}
func (UnimplementedCMSServiceServer) ImportFromExternal(context.Context, *ImportRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportFromExternal not implemented")
}
func (UnimplementedCMSServiceServer) mustEmbedUnimplementedCMSServiceServer() {}
func (UnimplementedCMSServiceServer) testEmbeddedByValue()                    {}

// UnsafeCMSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CMSServiceServer will
// result in compilation errors.
type UnsafeCMSServiceServer interface {
	mustEmbedUnimplementedCMSServiceServer()
}

func RegisterCMSServiceServer(s grpc.ServiceRegistrar, srv CMSServiceServer) {
	// If the following call pancis, it indicates UnimplementedCMSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CMSService_ServiceDesc, srv)
}

func _CMSService_CreateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).CreateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CMSService_CreateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).CreateContent(ctx, req.(*CreateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_UpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).UpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CMSService_UpdateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).UpdateContent(ctx, req.(*UpdateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_DeleteContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).DeleteContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CMSService_DeleteContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).DeleteContent(ctx, req.(*DeleteContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_ListContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).ListContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CMSService_ListContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).ListContents(ctx, req.(*ListContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_ImportFromExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).ImportFromExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CMSService_ImportFromExternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).ImportFromExternal(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CMSService_ServiceDesc is the grpc.ServiceDesc for CMSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CMSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mawjood.v1.CMSService",
	HandlerType: (*CMSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContent",
			Handler:    _CMSService_CreateContent_Handler,
		},
		{
			MethodName: "UpdateContent",
			Handler:    _CMSService_UpdateContent_Handler,
		},
		{
			MethodName: "DeleteContent",
			Handler:    _CMSService_DeleteContent_Handler,
		},
		{
			MethodName: "ListContents",
			Handler:    _CMSService_ListContents_Handler,
		},
		{
			MethodName: "ImportFromExternal",
			Handler:    _CMSService_ImportFromExternal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packages/proto/v1/cms.proto",
}
