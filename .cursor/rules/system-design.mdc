---
description: 
globs: 
alwaysApply: true
---
# System Design

This document outlines the system design for the Mawjood service based on the requirements provided.

## 1. High-Level Architecture

The system will be built using a microservices architecture to ensure low coupling and high scalability. Given the requirements, we'll start with a `ContentService` responsible for managing content.

- **Services**: Go-based gRPC services.
- **Database**: CockroachDB for resilient, scalable SQL.
- **Deployment**: Kubernetes (k8s) for container orchestration.
- **Build Tool**: Bazel for managing builds.

## 2. API Design (gRPC)

We will define a `ContentService` with RPCs to handle content management and discovery.

### Proto Definition (`proto/v1/content.proto`)

```protobuf
syntax = "proto3";

package mawjood.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Service for managing content like podcasts and documentaries.
service ContentService {
  // Creates a new piece of content.
  rpc CreateContent(CreateContentRequest) returns (Content);

  // Retrieves a piece of content by its ID.
  rpc GetContent(GetContentRequest) returns (Content);

  // Updates an existing piece of content.
  rpc UpdateContent(UpdateContentRequest) returns (Content);

  // Deletes a piece of content.
  rpc DeleteContent(DeleteContentRequest) returns (google.protobuf.Empty);

  // Lists all content with pagination.
  rpc ListContents(ListContentsRequest) returns (ListContentsResponse);

  // Searches for content based on a query.
  rpc SearchContents(SearchContentsRequest) returns (SearchContentsResponse);
}

enum ContentType {
  CONTENT_TYPE_UNSPECIFIED = 0;
  CONTENT_TYPE_PODCAST = 1;
  CONTENT_TYPE_DOCUMENTARY = 2;
}

message Content {
  string id = 1; // UUID
  string title = 2;
  string description = 3;
  repeated string tags = 4;
  string language = 5;
  int32 duration_seconds = 6;
  google.protobuf.Timestamp published_at = 7;
  ContentType content_type = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

// Requests and Responses

message CreateContentRequest {
  string title = 1;
  string description = 2;
  repeated string tags = 3;
  string language = 4;
  int32 duration_seconds = 5;
  google.protobuf.Timestamp published_at = 6;
  ContentType content_type = 7;
}

message GetContentRequest {
  string id = 1; // UUID
}

message UpdateContentRequest {
  string id = 1; // UUID
  string title = 2;
  string description = 3;
  repeated string tags = 4;
  string language = 5;
  int32 duration_seconds = 6;
  google.protobuf.Timestamp published_at = 7;
  ContentType content_type = 8;
}

message DeleteContentRequest {
  string id = 1; // UUID
}

message ListContentsRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListContentsResponse {
  repeated Content contents = 1;
  string next_page_token = 2;
}

message SearchContentsRequest {
  string query = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message SearchContentsResponse {
  repeated Content contents = 1;
  string next_page_token = 2;
}
```

## 3. Database Schema (CockroachDB)

The database will store content metadata. To handle tags efficiently for searching and filtering, we will use a many-to-many relationship between content and tags.

### Tables

#### `contents`

This table stores the core content metadata.

```sql
CREATE TABLE contents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    language VARCHAR(50),
    duration_seconds INT,
    published_at TIMESTAMPTZ,
    content_type VARCHAR(20) NOT NULL, -- 'podcast' or 'documentary'
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
```

#### `tags`

This table stores unique tags.

```sql
CREATE TABLE tags (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL UNIQUE
);
```

#### `content_tags`

This is a join table to associate content with tags.

```sql
CREATE TABLE content_tags (
    content_id UUID NOT NULL REFERENCES contents(id) ON DELETE CASCADE,
    tag_id UUID NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
    PRIMARY KEY (content_id, tag_id)
);
```

### Indexes

To support efficient querying for the search functionality:

```sql
-- Index for searching content by title
CREATE INDEX ON contents (title);

-- For full-text search, CockroachDB supports trigram indexes.
-- This can be used to implement the SearchContents RPC.
CREATE INVERTED INDEX ON contents (title gin_trgm_ops);
CREATE INVERTED INDEX ON contents (description gin_trgm_ops);

-- Index for finding tags by name
CREATE INDEX ON tags (name);

-- Indexes on the join table for efficient lookups in both directions
CREATE INDEX ON content_tags (tag_id);
```
