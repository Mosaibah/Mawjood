---
description: 
globs: 
alwaysApply: true
---
# Project Progress Tracker

This document tracks the development progress of the Mawjood project, breaking it down into small, manageable steps.

## Phase 1: Project Foundation & API Definition
- [X] **Status:** `Completed`
- **Goal:** Set up the basic monorepo structure, define the core API contracts, and configure the build system.

- [X] Set up the monorepo with the `packages` directory.
- [X] Initialize Bazel as the build system within the workspace.
- [X] Define the `DiscoveryService` API contract in `packages/proto/mawjood/v1/discovery.proto`.
- [X] Define the `CMSService` API contract in `packages/proto/mawjood/v1/cms.proto`.
- [X] Configure Bazel to generate Go gRPC code from the `.proto` files into `gen/go`.
- [X] Test the proto generation to ensure the build system is working correctly.

## Phase 2: Database Setup
- [X] **Status:** `Completed`
- **Goal:** Establish the database schema and populate it with initial data.

- [X] Set up a local CockroachDB instance using Docker.
- [X] Write the SQL script to create the `platforms`, `contents`, `tags`, and `content_tags` tables.
- [X] Apply the database schema.
- [X] Write the SQL script to create all necessary indexes for searching and relationships.
- [X] Apply the indexes.
- [X] Write a seeding script to insert the initial platform data (YouTube, Spotify, etc.).
- [X] Run the seed script.

## Phase 3: CMS Service Implementation
- [x] **Status:** `Completed`
- **Goal:** Build the service responsible for content management.

- [x] Create the basic directory structure for the `packages/cms` service.
- [x] Implement the `store` package for database CRUD operations on content.
- [x] Implement the `CreateContent` gRPC endpoint.
- [x] Implement the `UpdateContent` gRPC endpoint.
- [x] Implement the `DeleteContent` gRPC endpoint.
- [x] Implement the `ListContents` gRPC endpoint for the admin view.
- [x] Set up the main gRPC server for the CMS service.

## Phase 4: Discovery Service Implementation
- [x] **Status:** `Completed`
- **Goal:** Build the user-facing service for searching and discovering content.

- [x] Create the basic directory structure for the `packages/discovery` service.
- [x] Implement the `store` package for read-only database access.
- [x] Implement the `GetContent` gRPC endpoint.
- [x] Implement the `ListContents` gRPC endpoint with pagination.
- [x] Implement the `SearchContents` gRPC endpoint using full-text search capabilities.
- [x] Set up the main gRPC server for the Discovery service.

## Phase 5: Random Tasks
- [] **(Stretch Goal)** Implement the client for an external API (e.g., YouTube).
- [ ] **(Stretch Goal)** Implement the `ImportFromExternal` gRPC endpoint.
- [x] Improve search
- [x] logging
- [] input validation
- [] db design review

## Phase 6: Providers Service (Future)
- [ ] **Status:** `Not Started`
- **Goal:** Design and implement the service for integrating with external content providers. This will be tackled after the core services are complete.

- [ ] Define the `ProvidersService` in `packages/proto/mawjood/v1/providers.proto`.
- [ ] Plan and implement the service logic.

## Optional
- [ ] Create a `Dockerfile` to containerize the Discovery service.
- [ ] Create a `Dockerfile` cms to containerize the CMS service.


## Phase: Testing:
- [ ] Write unit tests for the cms `store` package.
- [ ] Write unit tests for the discovery `store` package.
- [ ] Write integration tests for discovery the gRPC endpoints.

## Phase 7: Documentation
- folder structure
- modules bounderies
- trigram matching

