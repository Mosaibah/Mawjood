---
description: 
globs: 
alwaysApply: true
---
# Folder Structure Explanation

This document explains how our project's folders are organized. This structure is designed to keep our code clean, easy to understand, and scalable, based on the services defined in `system-design.md`.

## Service Architecture

Our system is composed of three main services, each with distinct responsibilities:

### Service Responsibilities

- **Discovery Service**: Handles user-facing content search and discovery
- **CMS Service**: Manages content creation, updates, and external API integrations
- **Providers Service**: Integrates with external platforms (YouTube, Podcast platforms) - future implementation

### Service Interactions

- Users interact only with the **Discovery** service
- Admins interact only with the **CMS** service  
- **Discovery** and **CMS** services are independent and don't communicate directly
- Both services share the same database (temporary design - will be separated later)
- **CMS** service can integrate with external APIs for content ingestion

## Main `packages` Directory

The `packages` directory holds all the major parts of our application. We have three main services: `discovery`, `cms`, and `providers`. We also have a special folder called `proto` that helps our services talk to each other.

### `packages/proto`

This folder acts as the single source of truth for our API contracts. It contains the `.proto` files that define our gRPC services and messages.

```proto
// packages/proto/mawjood/v1/discovery.proto

syntax = "proto3";

package mawjood.v1;

import "google/protobuf/timestamp.proto";

// Service for user-facing content discovery and search
service DiscoveryService {
  // Searches for content based on a query
  rpc SearchContents(SearchContentsRequest) returns (SearchContentsResponse);
  
}
```

```proto
// packages/proto/mawjood/v1/cms.proto

syntax = "proto3";

package mawjood.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Service for content management (admin operations)
service CMSService {
  // Creates a new piece of content
  rpc CreateContent(CreateContentRequest) returns (Content);
}
```

-   **`mawjood/v1/discovery.proto`**: Defines the `DiscoveryService` for user-facing operations
-   **`mawjood/v1/cms.proto`**: Defines the `CMSService` for admin content management
-   **`mawjood/v1/providers.proto`**: Will define the `ProvidersService` for external integrations (future)
-   **`gen/go/`**: Bazel generates Go code from our `.proto` files

### `packages/discovery` (Discovery Service)

This service handles all user-facing content discovery and search operations.

-   **`v1/`**: Core business logic for discovery operations
    -   `service.go`: Implements the `DiscoveryServiceServer` interface

    ```go
    // packages/discovery/v1/service.go
    import discoverypbv1 "mawjood/gen/go/mawjood/v1"

    type DiscoveryService struct{
        discoverypbv1.UnimplementedDiscoveryServiceServer
        store store.ContentStoreInterface
    }

    func (s *DiscoveryService) SearchContents(ctx context.Context, req *discoverypbv1.SearchContentsRequest) (*discoverypbv1.SearchContentsResponse, error){
        // Search logic using CockroachDB's full-text search
        results, err := s.store.SearchContents(ctx, req.Query, req.PageSize, req.PageToken)
        // ...
    }
    ```
-   **`store/`**: Database operations for read-only content access
    -   `store.go`: Interface and implementation for content retrieval operations
-   **`server/`**: gRPC server setup for the discovery service
-   **`mock/`**: Mock implementations for testing
-   **`Dockerfile`**: Container configuration
-   **`BUILD.bazel`**: Bazel build configuration

### `packages/cms` (CMS Service)

This service handles all content management operations for administrators.

-   **`v1/`**: Core business logic for content management
    -   `service.go`: Implements the `CMSServiceServer` interface

    ```go
    // packages/cms/v1/service.go
    import cmspbv1 "mawjood/gen/go/mawjood/v1"

    type CMSService struct{
        cmspbv1.UnimplementedCMSServiceServer
        store store.ContentStoreInterface
        externalClient external.ExternalAPIClient
    }

    func (s *CMSService) CreateContent(ctx context.Context, req *cmspbv1.CreateContentRequest) (*cmspbv1.Content, error){
        // Content creation logic with validation
        newContent, err := s.store.CreateContent(ctx, req)
        // ...
    }
    ```
-   **`store/`**: Database operations for content CRUD operations
    -   `store.go`: Interface and implementation for content management
-   **`external/`**: External API integrations (YouTube, Podcast platforms)
    -   `client.go`: Client for external content providers
-   **`server/`**: gRPC server setup for the CMS service
-   **`mock/`**: Mock implementations for testing
-   **`Dockerfile`**: Container configuration
-   **`BUILD.bazel`**: Bazel build configuration

### `packages/providers` (Providers Service)

This service will handle integrations with external content platforms (future implementation).

-   **`v1/`**: Core business logic for provider integrations
-   **`youtube/`**: YouTube API integration
-   **`podcast/`**: Podcast platform integrations
-   **`server/`**: gRPC server setup
-   **`mock/`**: Mock implementations for testing
-   **`Dockerfile`**: Container configuration
-   **`BUILD.bazel`**: Bazel build configuration

## Why this structure?

1.  **Clear Separation**: Discovery and CMS services have distinct responsibilities and don't interfere with each other
2.  **Scalability**: Each service can be scaled independently based on load
3.  **Security**: Admin operations are isolated in the CMS service
4.  **Future-Proof**: Providers service can be added later without affecting existing services
5.  **Database Independence**: Services can eventually use separate databases for better isolation
